<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.store.fresh.mapper.ProductMapper">
    <resultMap id="BaseResultMap" type="com.store.fresh.entity.Product">
        <id column="product_id" jdbcType="VARCHAR" property="productId" />
        <result column="product_name" jdbcType="VARCHAR" property="productName" />
        <result column="category" jdbcType="VARCHAR" property="category" />
        <result column="cost" jdbcType="REAL" property="cost" />
        <result column="pre_price" jdbcType="REAL" property="prePrice" />
        <result column="price" jdbcType="REAL" property="price" />
        <result column="deposit" jdbcType="INTEGER" property="deposit" />
        <result column="unit" jdbcType="VARCHAR" property="unit" />
        <result column="scale" jdbcType="VARCHAR" property="scale" />
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
    product_id, product_name, category, cost, pre_price, price, deposit, unit, scale
  </sql>
    <select id="selectByExample" parameterType="com.store.fresh.entity.ProductExample" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List" />
        from product
        <if test="_parameter != null">
            <include refid="Example_Where_Clause" />
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from product
        where product_id = #{productId,jdbcType=VARCHAR}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from product
    where product_id = #{productId,jdbcType=VARCHAR}
  </delete>
    <delete id="deleteByExample" parameterType="com.store.fresh.entity.ProductExample">
        delete from product
        <if test="_parameter != null">
            <include refid="Example_Where_Clause" />
        </if>
    </delete>
    <insert id="insert" parameterType="com.store.fresh.entity.Product">
    insert into product (product_id, product_name, category,
      cost, pre_price, price, deposit,
      unit, scale)
    values (#{productId,jdbcType=VARCHAR}, #{productName,jdbcType=VARCHAR}, #{category,jdbcType=VARCHAR},
      #{cost,jdbcType=REAL}, #{prePrice,jdbcType=REAL}, #{price,jdbcType=REAL}, #{deposit,jdbcType=INTEGER},
      #{unit,jdbcType=VARCHAR}, #{scale,jdbcType=VARCHAR})
  </insert>
    <insert id="insertSelective" parameterType="com.store.fresh.entity.Product">
        insert into product
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="productId != null">
                product_id,
            </if>
            <if test="productName != null">
                product_name,
            </if>
            <if test="category != null">
                category,
            </if>
            <if test="cost != null">
                cost,
            </if>
            <if test="prePrice != null">
                pre_price,
            </if>
            <if test="price != null">
                price,
            </if>
            <if test="deposit != null">
                deposit,
            </if>
            <if test="unit != null">
                unit,
            </if>
            <if test="scale != null">
                scale,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="productId != null">
                #{productId,jdbcType=VARCHAR},
            </if>
            <if test="productName != null">
                #{productName,jdbcType=VARCHAR},
            </if>
            <if test="category != null">
                #{category,jdbcType=VARCHAR},
            </if>
            <if test="cost != null">
                #{cost,jdbcType=REAL},
            </if>
            <if test="prePrice != null">
                #{prePrice,jdbcType=REAL},
            </if>
            <if test="price != null">
                #{price,jdbcType=REAL},
            </if>
            <if test="deposit != null">
                #{deposit,jdbcType=INTEGER},
            </if>
            <if test="unit != null">
                #{unit,jdbcType=VARCHAR},
            </if>
            <if test="scale != null">
                #{scale,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.store.fresh.entity.ProductExample" resultType="java.lang.Long">
        select count(*) from product
        <if test="_parameter != null">
            <include refid="Example_Where_Clause" />
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update product
        <set>
            <if test="record.productId != null">
                product_id = #{record.productId,jdbcType=VARCHAR},
            </if>
            <if test="record.productName != null">
                product_name = #{record.productName,jdbcType=VARCHAR},
            </if>
            <if test="record.category != null">
                category = #{record.category,jdbcType=VARCHAR},
            </if>
            <if test="record.cost != null">
                cost = #{record.cost,jdbcType=REAL},
            </if>
            <if test="record.prePrice != null">
                pre_price = #{record.prePrice,jdbcType=REAL},
            </if>
            <if test="record.price != null">
                price = #{record.price,jdbcType=REAL},
            </if>
            <if test="record.deposit != null">
                deposit = #{record.deposit,jdbcType=INTEGER},
            </if>
            <if test="record.unit != null">
                unit = #{record.unit,jdbcType=VARCHAR},
            </if>
            <if test="record.scale != null">
                scale = #{record.scale,jdbcType=VARCHAR},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause" />
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update product
        set product_id = #{record.productId,jdbcType=VARCHAR},
        product_name = #{record.productName,jdbcType=VARCHAR},
        category = #{record.category,jdbcType=VARCHAR},
        cost = #{record.cost,jdbcType=REAL},
        pre_price = #{record.prePrice,jdbcType=REAL},
        price = #{record.price,jdbcType=REAL},
        deposit = #{record.deposit,jdbcType=INTEGER},
        unit = #{record.unit,jdbcType=VARCHAR},
        scale = #{record.scale,jdbcType=VARCHAR}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause" />
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.store.fresh.entity.Product">
        update product
        <set>
            <if test="productName != null">
                product_name = #{productName,jdbcType=VARCHAR},
            </if>
            <if test="category != null">
                category = #{category,jdbcType=VARCHAR},
            </if>
            <if test="cost != null">
                cost = #{cost,jdbcType=REAL},
            </if>
            <if test="prePrice != null">
                pre_price = #{prePrice,jdbcType=REAL},
            </if>
            <if test="price != null">
                price = #{price,jdbcType=REAL},
            </if>
            <if test="deposit != null">
                deposit = #{deposit,jdbcType=INTEGER},
            </if>
            <if test="unit != null">
                unit = #{unit,jdbcType=VARCHAR},
            </if>
            <if test="scale != null">
                scale = #{scale,jdbcType=VARCHAR},
            </if>
        </set>
        where product_id = #{productId,jdbcType=VARCHAR}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.store.fresh.entity.Product">
    update product
    set product_name = #{productName,jdbcType=VARCHAR},
      category = #{category,jdbcType=VARCHAR},
      cost = #{cost,jdbcType=REAL},
      pre_price = #{prePrice,jdbcType=REAL},
      price = #{price,jdbcType=REAL},
      deposit = #{deposit,jdbcType=INTEGER},
      unit = #{unit,jdbcType=VARCHAR},
      scale = #{scale,jdbcType=VARCHAR}
    where product_id = #{productId,jdbcType=VARCHAR}
  </update>


    <select id="findAll" resultType="com.store.fresh.entity.Product">
        select * from product
    </select>
    
    <select id="getHotDiscount" resultMap="BaseResultMap">
        select * from product
        where pre_price > price
        limit 4
    </select>

    <select id="getPicturePath" resultType="java.lang.String" parameterType="java.lang.String">
        select picture_path from picture_path
        where product_id = #{productId,jdbcType=VARCHAR}
    </select>

</mapper>